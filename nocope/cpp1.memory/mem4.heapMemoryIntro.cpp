
int main()
{
  int * ip;     // ip라는 포인터 정보를 담는 변수가 스택에 쌓임
  ip = new int;  // new라는 키워드는 힙 메모리 할당 키워드, 힙 메모리에 int 사이즈만큼 메모리 공간을 할당
  // 결국 * 포인터가 힙 메모리 공간을 가리키고 있음
  *ip = 100;    // ip 가리키는 힙메모리 공간에 100을 할당
  delete ip;    // 힙메모리 부분 삭제되고

  return 0;     // 포인터 스택 부분도 삭제되고 프로그램 종료
}




/*
힙메모리를 이해해야 메모리 릭이 나지 않는 프로그램 짤 수 있음
힙은 무질서하게 쌓여있는 느낌 
스태에 포인터를 쌓아서 그 포인터가 힙 메모리를 가리키도록 해서 관리해줌

왜 스택이 아니라 힙을 사용해야 하나

1. 라이프 사이클
 - 스택만 쓰면 쌓아놓은 데이터가 팝이 될때 다 삭제되는 문제가 생기는데, 이를 포인터로 힙에 연결해 놓으면
   포인터만 관리하면 되기에, 라이프 사이클 문제에서 벗어날 수 있음
2. 사이즈
 - 스택은 리밋이 있기에, 포인터로 힙메모리에 연결하면 큰 사이즈 데이터도 관리 가능
3. 다이나믹 
  - 런타임 사이즈 문제, 
  - 스택프레임은 모든게 컴파일 할 때 결정됨. 하지만 컴파일 때 알 수 없는 정보가 존재,
  실행과정에서 결정하는 데이터들을 포인터를 이용해 힙에 만들면 다이나믹 사이즈 문제 해결
*/