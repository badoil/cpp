// https://www.acmicpc.net/source/share/c6d595c39c7d4c9d9dffd6fb9c6cc94f

// 문제
// 흑백 영상을 압축하여 표현하는 데이터 구조로 쿼드 트리(Quad Tree)라는 방법이 있다. 
// 흰 점을 나타내는 0과 검은 점을 나타내는 1로만 이루어진 영상(2차원 배열)에서 같은 숫자의 점들이 한 곳에 많이 몰려있으면, 쿼드 트리에서는 이를 압축하여 간단히 표현할 수 있다.
// 주어진 영상이 모두 0으로만 되어 있으면 압축 결과는 "0"이 되고, 모두 1로만 되어 있으면 압축 결과는 "1"이 된다. 
// 만약 0과 1이 섞여 있으면 전체를 한 번에 나타내지를 못하고, 왼쪽 위, 오른쪽 위, 왼쪽 아래, 
// 오른쪽 아래, 이렇게 4개의 영상으로 나누어 압축하게 되며, 이 4개의 영역을 압축한 결과를 차례대로 괄호 안에 묶어서 표현한다

// 입력
// 첫째 줄에는 영상의 크기를 나타내는 숫자 N 이 주어진다. N 은 언제나 2의 제곱수로 주어지며, 1 ≤ N ≤ 64의 범위를 가진다. 
// 두 번째 줄부터는 길이 N의 문자열이 N개 들어온다. 각 문자열은 0 또는 1의 숫자로 이루어져 있으며, 영상의 각 점들을 나타낸다.

// 출력
// 영상을 압축한 결과를 출력한다.

// 8                
// 1 1 1 1 0 0 0 0             ->     ((110(0101)) (0010) 1 (0001))
// 1 1 1 1 0 0 0 0
// 0 0 0 1 1 1 0 0
// 0 0 0 1 1 1 0 0 
// 1 1 1 1 0 0 0 0 
// 1 1 1 1 0 0 0 0 
// 1 1 1 1 0 0 1 1 
// 1 1 1 1 0 0 1 1 


#include<bits/stdc++.h>
using namespace std;

int n, a[65][65];
string s;


string dfs(int y, int x, int size) {
    if (size==1) return string(1, a[y][x]);

    char b = a[y][x];
    string ret = "";
    for(int i=y; i<y+size; i++) {                       // 사이즈만큼 y, x를 움직이면서 원소들이 b와 다르면 재귀함수 호출하고 
        for(int j=x; j<x+size; j++) {                   // 같으면 b 를 리턴함
            if (b != a[i][j]) {
                ret += '(';
                ret += dfs(y, x, size/2);
                ret += dfs(y, x+size/2, size/2);
                ret += dfs(y+size/2, x, size/2);
                ret += dfs(y+size/2, x+size/2, size/2);
                ret += ')';
                return ret;
            }
        }
    }
    return string(1, a[y][x]);
}

int main () {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    cin >> n;
    for(int i=0; i<n; i++) {
        cin >> s;
        for(int j=0; j<n; j++) {
            a[i][j] = s[j];
        }
    }

    cout << dfs(0, 0, n) << "\n";
    return 0;
}

// 핵심은 전체 사각형을 반으로 쪼개면서 재귀함수를 호출하는 것
// 아래와 같이 가장 작은 사이즈 2인 애들부터 생각하면서 재귀함수가 어떻게 동작하는지 보면 됨
// 1 1  , 1 0
// 1 1  , 1 0
// 여기서 b 는 왼쪽 위 값인 1이다. 이를 기준으로 오른쪽 위(1), 왼쪽아래(1) 오른쪽 아래(1)와 비교해서
// 같으면 그냥 b의 값 1을 리턴

// 1 0
// 1 0
// 얘는 b와 나머지 세 원소가 다르기때문에 각 원소의 값(1010) 그대로 리턴해줌(순서는 왼위->오위->왼아->오아)