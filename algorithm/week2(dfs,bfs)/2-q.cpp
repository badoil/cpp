//https://www.acmicpc.net/source/share/9d501d050d9d4bf09d3ec51798957225

// 문제
// 아래 <그림 1>과 같이 정사각형 칸들로 이루어진 사각형 모양의 판이 있고, 그 위에 얇은 치즈(회색으로 표시된 부분)가 놓여 있다. 
// 판의 가장자리(<그림 1>에서 네모 칸에 X친 부분)에는 치즈가 놓여 있지 않으며 치즈에는 하나 이상의 구멍이 있을 수 있다.
// 이 치즈를 공기 중에 놓으면 녹게 되는데 공기와 접촉된 칸은 한 시간이 지나면 녹아 없어진다. 치즈의 구멍 속에는 공기가 없지만 구멍을 둘러싼 치즈가 녹아서 구멍이 열리면 구멍 속으로 공기가 들어가게 된다. 
// <그림 1>의 경우, 치즈의 구멍을 둘러싼 치즈는 녹지 않고 ‘c’로 표시된 부분만 한 시간 후에 녹아 없어져서 <그림 2>와 같이 된다.

// 00000
// 01110
// 01110
// 01110
// 00000
// <그림 1> 원래 치즈 모양

// 다시 한 시간 후에는 <그림 2>에서 ‘c’로 표시된 부분이 녹아 없어져서 <그림 3>과 같이 된다.

// 00000
// 00000
// 00100
// 00000
// 00000

// <그림 2> 한 시간 후의 치즈 모양

// 00000
// 00000
// 00000
// 00000
// 00000


// <그림 3> 두 시간 후의 치즈 모양

// <그림 3>은 원래 치즈의 두 시간 후 모양을 나타내고 있으며, 남은 조각들은 한 시간이 더 지나면 모두 녹아 없어진다. 
// 그러므로 처음 치즈가 모두 녹아 없어지는 데는 세 시간이 걸린다. <그림 3>과 같이 치즈가 녹는 과정에서 여러 조각으로 나누어 질 수도 있다.
// 입력으로 사각형 모양의 판의 크기와 한 조각의 치즈가 판 위에 주어졌을 때, 
// 공기 중에서 치즈가 모두 녹아 없어지는 데 걸리는 시간과 모두 녹기 한 시간 전에 남아있는 치즈조각이 놓여 있는 칸의 개수를 구하는 프로그램을 작성하시오.

// 입력
// 첫째 줄에는 사각형 모양 판의 세로와 가로의 길이가 양의 정수로 주어진다. 세로와 가로의 길이는 최대 100이다. 판의 각 가로줄의 모양이 윗 줄부터 차례로 둘째 줄부터 마지막 줄까지 주어진다. 치즈가 없는 칸은 0, 치즈가 있는 칸은 1로 주어지며 각 숫자 사이에는 빈칸이 하나씩 있다.

// 출력
// 첫째 줄에는 치즈가 모두 녹아서 없어지는 데 걸리는 시간을 출력하고, 둘째 줄에는 모두 녹기 한 시간 전에 남아있는 치즈조각이 놓여 있는 칸의 개수를 출력한다.



#include<bits/stdc++.h>
using namespace std;

int m, n, a[104][104], ny, nx, visited[104][104];
int dy[4] = {-1, 0, 1, 0};
int dx[4] = {0, 1, 0, -1};
vector<pair<int,int>> v;

void dfs(int y, int x) {
    visited[y][x] = 1;
    if(a[y][x]==1) {
        v.push_back({y,x});
        return;
    }
    for (int i=0; i<4; i++) {
        ny = y+dy[i];
        nx = x+dx[i];
        if(ny<0||nx<0||ny>=m||nx>=n||visited[ny][nx]==1) continue;
        dfs(ny, nx);
    }
    return;
}

int main() {
    cin >> m >> n;
    for(int i=0; i<m; i++) {
        for(int j=0; j<n; j++) {
            cin >> a[i][j];
        }
    }

    int cnt=0;  // 시간 카운팅
    int cnt2=0; // 다녹기 한시간전 치즈조각 카운트 용
    while(true) {
        fill(&visited[0][0], &visited[0][0]+104*104, 0);    // 매번 dfs(0,0) 을 다시 할것이므로 visited를 모두 0으로 다시 초기화
        cnt2=0;                                             // 바로 전 시간의 남은 치즈조각 초기화, 이번판 치즈조각 카운팅 해야하므로
        v.clear();                                          // 전판에 녹아없어진 치즈조각 모아둔 벡터, 비워서 초기화
        dfs(0,0);                                           // dfs 하고 나면 녹아없어질 치즈조각이 v 벡터에 다시 채워짐
        for(auto c: v) {
            a[c.first][c.second] = 0;            // 그 치즈조각들 없애줌, 얘는 지금 녹아 없애줬지만 사실 시간은 아직 한시간 안지남, 왜냐면 마지막에 cnt++ 을 해주기 때문에
            cnt2++;                              // 그 치즈조각 갯수 카운팅
        }                                       // 만약 그 치즈조각 갯수가 마지막이었다면, 와일문은 바로 다음 포문에 걸리고 flag=0 이 되서 와일문 끝남
        bool flag = 0;
        for(int i=0; i<m; i++) {                // 브레이크 조건
            for (int j=0; j<n; j++) {
                if (a[i][j] == 1) flag=1;
                else flag=0;
            }
        }
        cnt++;              // 브레이크 전에 카운팅, 마지막 치즈가 소거됐다면 마지막 한시간도 더해줘야 하기 때문에
        if (!flag) break;
    }
    cout << cnt << "\n" << cnt2;
    return 0;
}


// 시간이 계속 흐르므로 while 문 사용
// while 문 브레이크 조건 필요
// cnt, cnt2 각각 시간과 남은 치즈조각 갯수 카운팅
// 매번 visited와 cnt2, 벡터 v 초기화 시키기, 항상 초기화 생각하기!!!!!!!