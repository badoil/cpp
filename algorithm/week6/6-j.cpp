// 문제
// N명의 아이들이 한 줄로 줄을 서서 놀이공원에서 1인승 놀이기구를 기다리고 있다. 이 놀이공원에는 총 M종류의 1인승 놀이기구가 있으며, 1번부터 M번까지 번호가 매겨져 있다.
// 모든 놀이기구는 각각 운행 시간이 정해져 있어서, 운행 시간이 지나면 탑승하고 있던 아이는 내리게 된다. 
// 놀이 기구가 비어 있으면 현재 줄에서 가장 앞에 서 있는 아이가 빈 놀이기구에 탑승한다. 만일 여러 개의 놀이기구가 동시에 비어 있으면, 더 작은 번호가 적혀 있는 놀이기구를 먼저 탑승한다고 한다.
// 놀이기구가 모두 비어 있는 상태에서 첫 번째 아이가 놀이기구에 탑승한다고 할 때, 줄의 마지막 아이가 타게 되는 놀이기구의 번호를 구하는 프로그램을 작성하시오.

// 입력
// 첫째 줄에 N(1 ≤ N ≤ 2,000,000,000)과 M(1 ≤ M ≤ 10,000)이 빈칸을 사이에 두고 주어진다. 
// 둘째 줄에는 각 놀이기구의 운행 시간을 나타내는 M개의 자연수가 순서대로 주어진다. 운행 시간은 1 이상 30 이하의 자연수이며, 단위는 분이다.

// 출력
// 첫째 줄에 마지막 아이가 타게 되는 놀이기구의 번호를 출력한다.


#include <bits/stdc++.h>
using namespace std;
#define max_n 60000000004

typedef long long ll;
ll n, m, a[10004], ret;


bool check(ll mid) {
    ll temp = m;                                // 초기화 하는 이유는 첫 사이클에는 아이들이 놀이기구 수만큼 순서대로 탈것이기 때문에
    for (ll i=0; i<m; i++) temp += mid/a[i];    // temp 값은 놀이기구에 탄 아이들 총 인원수, 일정한 시간 mid 동안 그 놀이기구 운행시간을 나누면 탈 수 있는 인원수 
    return temp >= n;                           // temp 값이 실제 아이들 수보다 큰지 여부
}

int main () {
    cin >> n >> m;

    for (int i=0; i<m; i++) {
        cin >> a[i];
    }

    if (n<=m) {
        cout << n << "\n";
        return 0;
    }

    ll lo = 0, hi = max_n;
    while(lo<=hi) {
        ll mid = (lo+hi)/(1ll*2);
        if (check(mid)) {
            hi = mid - 1;
            ret = mid;
        } else lo = mid + 1;
    }

    ll temp = m;
    for (ll i=0; i<m; i++) temp += ((ret-1)/a[i]);      // temp는 마지막 1초전에 놀이기구에 탑승한 아이들 총 인원수
    
    for (ll i=0; i<m; i++) {
        if (ret%a[i]==0) temp++;            // 마지막 시간에 타는 아이들 수 누적
        if (temp == n) {                    // 그 수가 마지막 아이라면 그거 출력
            cout << i+1 << "\n";
            return 0;
        }
    }

    return 0;
}


// https://imnotabear.tistory.com/407
// 위 링크 해설 참 좋음
// 개좋은 문제
// 시간을 기준으로 모든 놀이기구를 그 시간동안 탈 수 있는 아이들 인원수를 구하는것
// 마지막 1초전에 놀이기구에 탑승한 아이들 총 인원수를 구하고
// ret % a[i]==0 이 되면 그 놀이기구 탈 수 있으니깐 인원수 누적하고
// temp == n 되는 순간의 놀이기구 번호 i+1 출력