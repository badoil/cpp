// https://www.acmicpc.net/problem/17070

// 문제
// 유현이가 새 집으로 이사했다. 새 집의 크기는 N×N의 격자판으로 나타낼 수 있고, 1×1크기의 정사각형 칸으로 나누어져 있다. 
// 각각의 칸은 (r, c)로 나타낼 수 있다. 여기서 r은 행의 번호, c는 열의 번호이고, 행과 열의 번호는 1부터 시작한다. 각각의 칸은 빈 칸이거나 벽이다.
// 오늘은 집 수리를 위해서 파이프 하나를 옮기려고 한다. 파이프는 아래와 같은 형태이고, 2개의 연속된 칸을 차지하는 크기이다.

// 파이프는 회전시킬 수 있으며, 아래와 같이 3가지 방향이 가능하다.

// 파이프는 매우 무겁기 때문에, 유현이는 파이프를 밀어서 이동시키려고 한다. 벽에는 새로운 벽지를 발랐기 때문에, 파이프가 벽을 긁으면 안 된다. 즉, 파이프는 항상 빈 칸만 차지해야 한다.
// 파이프를 밀 수 있는 방향은 총 3가지가 있으며, →, ↘, ↓ 방향이다. 파이프는 밀면서 회전시킬 수 있다. 회전은 45도만 회전시킬 수 있으며, 미는 방향은 오른쪽, 아래, 또는 오른쪽 아래 대각선 방향이어야 한다.
// 파이프가 가로로 놓여진 경우에 가능한 이동 방법은 총 2가지, 세로로 놓여진 경우에는 2가지, 대각선 방향으로 놓여진 경우에는 3가지가 있다.

// 아래 그림은 파이프가 놓여진 방향에 따라서 이동할 수 있는 방법을 모두 나타낸 것이고, 꼭 빈 칸이어야 하는 곳은 색으로 표시되어져 있다.
// 가장 처음에 파이프는 (1, 1)와 (1, 2)를 차지하고 있고, 방향은 가로이다. 파이프의 한쪽 끝을 (N, N)로 이동시키는 방법의 개수를 구해보자.

// 입력
// 첫째 줄에 집의 크기 N(3 ≤ N ≤ 16)이 주어진다. 둘째 줄부터 N개의 줄에는 집의 상태가 주어진다. 빈 칸은 0, 벽은 1로 주어진다. (1, 1)과 (1, 2)는 항상 빈 칸이다.

// 출력
// 첫째 줄에 파이프의 한쪽 끝을 (N, N)으로 이동시키는 방법의 수를 출력한다. 이동시킬 수 없는 경우에는 0을 출력한다. 방법의 수는 항상 1,000,000보다 작거나 같다.


#include <bits/stdc++.h>
using namespace std;

int n, a[16][16], b[16][16][3], ret;


bool check(int y, int x, int d) {
    if (d==0 || d==1) {
        if (!a[y][x]) return true;
    } else if (d==2) {
        if (!a[y][x] && !a[y-1][x] && !a[y][x-1]) return true;
    }
    return false;
}

int main () {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    cin >> n;
    for(int i=1; i<=n; i++) {
        for(int j=1; j<=n; j++) {
            cin >> a[i][j];
        }
    }

    b[1][2][0] = 1;
    for(int i=1; i<=n; i++) {
        for(int j=1; j<=n; j++) {
            // 가로방향
            if(check(i, j+1, 0)) b[i][j+1][0] += b[i][j][0];        // 옮겨갈 좌표를 체크, 빈곳인지 아닌지
            if(check(i+1, j+1, 2)) b[i+1][j+1][2] += b[i][j][0];    // 거기가 빈곳이면 그 전까지의 경우의 수를 더해줌

            // 세로방향
            if(check(i+1, j, 1)) b[i+1][j][1] += b[i][j][1];
            if(check(i+1, j+1, 2)) b[i+1][j+1][2] += b[i][j][1];

            //대각방향
            if(check(i, j+1, 0)) b[i][j+1][0] += b[i][j][2];
            if(check(i+1, j, 1)) b[i+1][j][1] += b[i][j][2];
            if(check(i+1, j+1, 2)) b[i+1][j+1][2] += b[i][j][2];
        }
    }

    ret = b[n][n][0];
    ret += b[n][n][1];
    ret += b[n][n][2];

    cout << ret << "\n";
    return 0;

}


// 경우의 수, 방향전환은 3가지 경우가 있으므로 
// 각 방향을 전진하면서 그 경우의 수들을 누적해줌
// b[16][16][3] 삼차원배열 이용
// 