// 문제
// 세로 R칸, 가로 C칸으로 된 표 모양의 보드가 있다. 보드의 각 칸에는 대문자 알파벳이 하나씩 적혀 있고, 좌측 상단 칸 (1행 1열) 에는 말이 놓여 있다.
// 말은 상하좌우로 인접한 네 칸 중의 한 칸으로 이동할 수 있는데, 새로 이동한 칸에 적혀 있는 알파벳은 지금까지 지나온 모든 칸에 적혀 있는 알파벳과는 달라야 한다. 
// 즉, 같은 알파벳이 적힌 칸을 두 번 지날 수 없다.
// 좌측 상단에서 시작해서, 말이 최대한 몇 칸을 지날 수 있는지를 구하는 프로그램을 작성하시오. 말이 지나는 칸은 좌측 상단의 칸도 포함된다.

// 입력
// 첫째 줄에 R과 C가 빈칸을 사이에 두고 주어진다. (1 ≤ R,C ≤ 20) 둘째 줄부터 R개의 줄에 걸쳐서 보드에 적혀 있는 C개의 대문자 알파벳들이 빈칸 없이 주어진다.

// 출력
// 첫째 줄에 말이 지날 수 있는 최대의 칸 수를 출력한다.

#include<bits/stdc++.h>
using namespace std;

int r, c, visited[30], ret, ny, nx;
char a[24][24];
int dy[4] = { -1, 0, 1, 0 };
int dx[4] = { 0, 1, 0, -1 };

void go(int a, int b, int cnt) {
    ret = max(ret, cnt);            // 다른 경로로 가는 경우의 카운트들과 계속 비교해서 맥스값 저장

    for (int i=0; i<4; i++) {
        ny = dy[i] + a;
        nx = dx[i] + b;
        if (ny<0||nx<0||ny>=r||nx>=c) continue;
        int next = (int)(a[ny][nx] - 'A');

        if (!visited[next)]) {
            visited[next] = 1;
            go(ny, nx, cnt+1);
            visited[next] = 0;          // 앞서 방문한 곳 원복시켜야, 새로운 곳으로 갈 수 있음
        }
        
    }
    return;         // 이게 이 재귀함수의 기저사례
}

int main() {
    cin >> r >> c;

    for (int i=0; i<r; i++) {
        for (int j=0; j<c; j++) {
            cin >> a[i][j];
        }
    }

    visited[(int)a[0][0] - 'A'] = 1;
    go(0, 0, 1);
    cout << ret << "\n";
    return 0;
}


// 네 방향으로 가면서 고 함수를 재귀적으로 호출
// 그러면서 카운트 해주고 모든 반복 끝나면 리턴
// 그후 그 카운트 값 출력