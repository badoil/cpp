// 문제
// 여는 괄호 ‘(’와 닫는 괄호 ‘)’로 구성된 문자열에서 아래의 조건을 만족하는 문자열을 올바른 괄호 문자열이라고 부른다.
// () 는 올바른 괄호 문자열이다
// 어떤 문자열 x가 올바른 괄호 문자열이라면, (x)도 올바른 괄호 문자열이다.
// 어떤 문자열 x와 y가 올바른 괄호 문자열이라면, xy도 올바른 괄호 문자열이다.
// 현욱은 친구로부터 생일 선물로 굉장히 긴 괄호 문자열을 받았다(도대체 왜 이런 걸 선물하는걸까?). 하지만 현욱은 올바른 괄호 문자열이 아니면 굉장히 싫어하기 때문에, 받은 괄호 문자열에서 연속한 일부분을 잘라서 올바른 괄호 문자열을 만들려고 한다. 그리고 이왕이면 긴 문자열이 좋으니 현욱은 부분 구간을 최대한 길게 잘라내려고 한다. 현욱을 도와 주어진 괄호 문자열에서 위의 조건을 만족하는 가장 긴 부분 문자열의 길이를 계산하는 프로그램을 작성해보자.

// 입력
// 첫 줄에 문자열의 길이 n (1 ≤ n ≤ 200,000)이 주어진다.
// 둘째 줄에 괄호로만 구성된 길이 n짜리 문자열이 주어진다.

// 출력
// 주어진 문자열에서 길이가 가장 길면서 올바른 괄호 문자열인 부분 문자열의 길이를 출력한다. 올바른 괄호 문자열인 부분 문자열을 찾을 수 없는 경우 0을 출력한다.

// 예제 입력 1          예제 출력 1 
// 5                  4
// (())(

// 예제 입력 2          예제 출력 2  
// 14                 8
// (()))()((()))(     



#include<bits/stdc++.h>
using namespace std;

int n, ret;
string s;
stack<int> stk;

int main () {

    cin >> n >> s;
    stk.push(-1);             // 인덱스가 0부터 시작되기 때문에 갯수를 올바르게 세기 위해 처음에 -1을 넣어줌
    for(int i=0; i<n; i++) {
        if (s[i] == '(') stk.push(i);
        if (s[i] == ')') {
            stk.pop();
            if(!stk.empty()) {                  // stk이 비어있지 않다는 것은 괄호가 아직 안끝났다는 의미
                ret = max(ret, i-stk.top());    // 괄호의 길이를 구해서 이를 맥스 갱신 해줌
            } else stk.push(i);             // 새로운 괄호가 다시 시작될 수 있으므로
        }
    }

    cout << ret << "\n";
    return 0;
}


// 코드를 보라